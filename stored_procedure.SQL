drop table if exists accounts;

create table accounts (
    id int generated by default as identity,
    name varchar(100) not null,
    balance dec(15,2) not null,
    primary key(id)
);

insert into accounts(name,balance)
values('Bob',10000);

insert into accounts(name,balance)
values('Alice',10000);

SELECT * FROM accounts


---- Creating a procedure ----

create or replace procedure transfer(
   sender int,
   receiver int, 
   amount dec
)

language plpgsql    
AS $$
begin
    -- subtracting the amount from the sender's account 
   
   update accounts 
    set balance = balance - amount 
    where id = sender;

    -- adding the amount to the receiver's account
    update accounts 
    set balance = balance + amount 
    where id = receiver;

    commit;
end;$$


drop table if exists accounts;

create table accounts (
    id int generated by default as identity,
    name varchar(100) not null,
    balance dec(15,2) not null,
    primary key(id)
); 

insert into accounts(name,balance)
values
('Bob',10000),
('Alice',10000),
('Collins',68000),
('Derrick',16000),
('Ernest',98000)
;

SELECT * FROM accounts


---- Creating a procedure 


create or replace procedure transfer(
   sender int,
   receiver int, 
   amount dec
)

language plpgsql    
AS
$$
BEGIN
    -- subtracting the amount from the sender's account 
   
   update accounts 
    set balance = balance - amount 
    where id = sender;

    -- adding the amount to the receiver's account
    update accounts 
    set balance = balance + amount 
    where id = receiver;

    commit;
end;
$$

--Calling a stored procedure
CALL transfer (3,4,550);

SELECT * FROM accounts;


---------------------------------------------------------------------------------------------------

--Row number



EXPLAIN 
	WITH prices AS (
	SELECT
	*
	FROM
	accounts)
	SELECT *, row_number () over (
	order by "name")
	FROM prices;
	
	##
	

--Working with date time--
drop table if exists calender;

Create Table calender("date" DATE, "count" INT);

Insert Into calender Values
('2022-12-04',1),
('2022-12-03',2),
('2022-12-02',1),
('2022-12-01',3),
('2022-11-30',1),
('2022-11-29',1),
('2022-11-28',1),
('2022-11-27',2);

select * from calender;

with check_date as
(
  select *
  from calender
  where "date" NOT IN ('2022-12-01')

),


"m" AS (
	select date, sum("count") as count_sum  
from check_date
group by date
order by date desc
	)

SELECT  count_sum, EXTRACT(MONTH FROM date) AS month
FROM m

---------------------------------------------------------------------------------------------------








